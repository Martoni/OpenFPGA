===============================================================================
The Sodor Processor Collection
===============================================================================
# Author : Christopher Celio
#        : 
# Date   : 2012 Feb 14
#

This repo has been put together to demonstrate a number of simple RISC-V
integer pipelines (a 1-stage, 2-stage, and a bus-based micro-coded
implementation). These processors talk to a simple direct-mapped cache, which
interfaces with off-chip memory.  They implement RV32. None of the pipelines
implement floating point, and only the 1-stage implements sub-word memory
accesses and a supervisor mode (a simple proxy-kernel is provided).
   
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
# How to Run:

To run all processors through their tests, simply type the following in this
directory:

   $ ./runall.sh
 

To clean up all of the output files:

   $ ./runall.sh clean
 

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
# How to bring in Chisel:

Chisel is automatically brought in from the internet (see
sbt/project/build.scala for details), so you don't have to think about this!


-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
# Installing SBT 

This repository includes SBT (Scala Built Tool).  

For your own edification, SBT can be found at:

http://github.com/harrah/xsbt/wiki/Getting-Started-Setup

You may find it necessary to increase the memory size (on the java command line
in the sbt script) from 512M to 2G (called in ./Makefile). 

We are currently using sbt 0.11 and scala 2.9.2 (I think, don't quote me).


-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
# More About Info:

Because this repository is designed to be used as zoo for Chisel processor
examples (and a regressive test for Chisel updates), the RISC-V front-end
server (fesvr), the RISCV-V proxy kernel (riscv-pk), and RISC-V binaries have
been included. No external RISC-V tools are used. 

Unfortunately, this means that the Makefiles have been modified to NOT compile
any RISC-V binaries, since the assumption is that riscv-gcc is not available.

For any future GSIs looking to role this back into a lab, the appropriate
changes will have to be made to allow students to recompile their own RISC-V
binaries (look at the Makefiles).


See docs/ for more information (a somewhat out-of-date lab handout is
provided, but the pipeline diagrams should be accurate enough). Mostly though,
read the makefiles to see what's going on (or email me).


-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
# A Few Last Words

 - Modify the "procs" variable in runall.sh if you only want to run one of the
 many available processors.

 - All processors can spit out cycle-by-cycle log information: see
 emulator/common/Makefile.include and add a "-l" to the fesvr binary arguments
 list (front-end server). WARNING: log files may become very large! By default,
 assembly tests already use "-l" and the longer running benchmarks do not. See
 the rule "run-bmarks: $(global_bmarks_outgz)..." which, if uncommented, will
 run the benchmarks in log mode and save the output to a .gz file (you can use
 "zcat vvadd.out.gz | vim -" to read these files easily enough, if vim is your
 thing). 

 - All processors can also spit out .vcd information (viewable by your favorite
 waveform viewer). See ./Makefile to add the "--vcd" flag to Chisel, and
 emulator/common/Makefile.include to add the "-v${vcdfilename}" flag to the
 fesvr binary. You should see example lines using these flags commented out.
 By default, the assembly tests write to a file called cpu.vcd. 

 - The 1-stage runs the bmarks using the proxy-kernel (riscv-pk), which allows
 it to trap and emulate illegal instructions (e.g., div/rem), and allows the
 use of printf from within the bmark application! 

 - Have fun!


-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
